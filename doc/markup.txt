*markup.txt*            For NVIM v0.10+            Last change: 14 August 2025

Enjoy a smoother, smarter experience when working with markup languages, with
handy features that take care of the little things for you.


TABLE OF CONTENTS                                   *markup-table-of-contents*

- |markup-features|
- |markup-requirements|
- |markup-installation|
- |markup-usage|
- |markup-motivation|
- |markup-license|


FEATURES                                                     *markup-features*

- Supports the following markup languages:
    - Markdown
    - Typst
    - LaTex
- Automatically:
    - Capitalizes the first letter of headings
    - Continues unordered lists
- Format the word under the cursor or visual selection as:
    - Bold
    - Italic
    - Bold + Italic
    - Inline or multiline code block
    - Inline or multiline quote block


REQUIREMENTS                                             *markup-requirements*

- Neovim 0.10+


INSTALLATION                                             *markup-installation*

Choose your preferred plugin manager and use the corresponding command:


LAZY.NVIM ~

>lua
    {
        "jeangiraldoo/markup.nvim",
        ft = {
            "markdown",
            "typst",
            "tex" -- latex
        },
        opts = {}
    }
<


PACKER.NVIM

>lua
    use {
        "jeangiraldoo/markup.nvim",
        config = function()
            require("markdown").setup({})
        end,
    }
<


CONFIGURATION                                           *markup-configuration*

Here are all the available configuration options and their defaults:

>lua
    -- Smart editing options:
    --   auto_capitalize_headings (boolean) -> Automatically capitalize the first letter of headings
    --   auto_continue_lists (boolean)      -> Automatically continue list entries when pressing Enter
    --
    -- Style options (each can be one of the following):
    --   - string: A format string with a '%s' placeholder for the text
    --   - function: A function that takes the text and returns formatted text
    --   - table: A table defining separate formats, where keys map to either strings or functions as above
    --        The table can include:
    --          inline           -> Format for inline usage
    --          multiline        -> Format for multiline usage
    --          multiline_repeat -> (optional) A prefix string repeated on each line in multiline usage
    --
    --   bold       -> Bold style
    --   italic     -> Italic style
    --   bolditalic -> Combined bold and italic
    --   quote      -> Quoted text style
    --   code       -> Code block style
    
    return {
        markdown = {
            smart_editing = {
                auto_capitalize_headings = true,
                auto_continue_lists = true,
            },
            style = {
                bold = "**%s**",
                italic = "_%s_",
                bolditalic = "***%s***",
                quote = {
                    inline = '"%s"',
                    multiline = "> %s",
                    multiline_repeat = "> ",
                },
                code = {
                    inline = "`%s`",
                    multiline = "```\n%s\n```",
                },
            },
        },
        typst = {
            smart_editing = {
                auto_capitalize_headings = true,
                auto_continue_lists = true,
            },
            style = {
                bold = "*%s*",
                italic = "_%s_",
                bolditalic = "_*%s*_",
                quote = {
                    inline = '"%s"',
                    multiline = "> %s",
                    multiline_repeat = "> ",
                },
                code = {
                    inline = "`%s`",
                    multiline = "```\n%s\n```",
                },
            },
        },
        tex = { -- Filetype used for LaTex
            smart_editing = {
                auto_capitalize_headings = true,
                auto_continue_lists = true,
            },
            style = {
                bold = "\\textbf{%s}",
                italic = "\\textit{%s}",
                bolditalic = "\\textbf{\\textit{%s}}",
                quote = {
                    inline = "``%s''",
                    multiline = "\\begin{quote}\n%s\n\\end{quote}",
                },
                code = {
                    inline = "\\verb|%s|",
                    multiline = "\\begin{verbatim}\n%s\n\\end{verbatim}",
                },
            },
        },
    }
<


USAGE                                                           *markup-usage*


SMART EDITING ~

Just edit your Markdown file as usual — the plugin works automatically in the
background.

- When you create a heading, the first letter will be capitalized instantly.
- When you press **Enter** after a list item, the next bullet or number will be inserted for you.

No commands or configuration are required.


MOTIVATION                                                 *markup-motivation*

I enjoy taking notes and writing documentation in Markdown, but I’ve always
wanted certain parts of the editing process to feel more automated, much like
in a traditional word processor. I first created this functionality for my own
Neovim setup, then decided to turn it into a plugin so others could enjoy it as
well (o˘˘o)


LICENSE                                                       *markup-license*

Markdown-plus is licensed under the MIT License. This means you are free to
download, install, modify, share, and use the plugin for both personal and
commercial purposes.

The only requirement is that if you modify and redistribute the code, you must
include the same LICENSE file found in this repository.

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
